{
	"info": {
		"_postman_id": "1b74040f-f41b-46e2-b60d-df23010650b9",
		"name": "zPermissions",
		"description": "This feature is in [Public Preview](https://docs.microsoft.com/azure/databricks/release-notes/release-types).\n\nThe Permissions API supports several objects and endpoints:\n\n* **[Token permissions](#tag/Token-permissions)** — Manage which users can create or use tokens.\n\n* **[Cluster permissions](#tag/Cluster-permissions)** — Manage which users can manage, restart, or attach to clusters.\n\n* **[Pool permissions](#tag/Instance-pool-permissions)** — Manage which users can manage or attach to pools. Some APIs and documentation refer to pools as _instance pools_.\n\n* **[Job permissions](#tag/Job-permissions)** — Manage which users can view, manage, trigger, cancel, or own a job.\n\n* **[Notebook permissions](#tag/Notebook-permissions)** — Manage which users can read, run, edit or manage a notebook.\n\n* **[Directory permissions](#tag/Directory-permissions)** — Manage which users can read, run, edit, or manage all notebooks in a directory.\n\n* **[MLflow registered model permissions](#tag/Registered-model-permissions)** — Manage which users can read, edit, or manage MLflow registered models.\n\n### Permission Inheritance \nIn some cases, objects can inherit permissions. Object types vary in how they handle inherited permissions from parent objects and root objects of the same object type. View JSON responses for details. Permissions in responses include the `inherited` property set to `true` if those permissions were inherited. In that case, the property `inherited_from_object` indicates from what object it inherited those permissions.\n\nKeep in mind the following rules:\n\n* A root object of each object type does not inherit permissions.\n\n* For tokens, you set permissions on the root object of that type so those object types never inherit permissions.\n\n* For directories, permissions can be inherited from all descendent directories. However, you can set permissions directly on the root directory and it has no parent, so the root directory never inherits permissions.\n\n* All other object types (clusters, pools, jobs, notebooks, registered models) inherit permissions from their root object.\n\nClusters and notebooks can inherit permissions from other object types:\n* Clusters inherit permissions from the root cluster object. Additionally, if the cluster is created from a job, the cluster also inherits permissions from the job.\n\n* Notebooks inherit permissions from descendent directories, similar to how directories inherit permissions from their descendent directories. For example, a notebook with path `/Users/jsmith@example.com/myNotebook` can inherit permissions from **all** of the following objects: `/` (root directory), `/Users`, and `/Users/jsmith@example.com`.\n\nFor every object that you can set direct permissions on, the direct permissions in the JSON response have `inherited` set to `false`.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "permissions",
			"item": [
				{
					"name": "authorization/tokens",
					"item": [
						{
							"name": "Get all token permissions for the workspace",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/authorization/tokens",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"authorization",
										"tokens"
									]
								},
								"description": "Get the set of all token permissions for the workspace. For an overview, see the [introduction to token permissions](#tag/Token-permissions)."
							},
							"response": [
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "Tokens were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"authorization/tokens\",\n \"object_type\": \"tokens\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    },\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    },\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								}
							]
						},
						{
							"name": "Update token permissions for a specific entity",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"irure Duis velit\",\n            \"permission_level\": \"<string>\"\n        },\n        {\n            \"user_name\": \"minim labore dolor laboris\",\n            \"permission_level\": \"<string>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/authorization/tokens",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"authorization",
										"tokens"
									]
								},
								"description": "Grant token permissions for one or more users, groups, or service principals. You can only grant the Can Use (`CAN_USE`) permission. The Can Manage (`CAN_MANAGE`) permission level cannot be granted with this API because it is tied automatically to membership in the `admins` group.\n\n**IMPORTANT:** You cannot use this request to revoke (remove) any permissions. The only way to remove permissions is with the [replace token permissions for entire workspace API](#operation/update-all-permissions), which requires you specify the complete set of permissions for all objects that are granted permissions.\n\nTo grant Can Use permission, in the `access_control_list` array in the request body, create an array element for the target object and set its name property (varies by object type) and `permission_level` property to `CAN_USE`.\n\nTo update and replace permissions for all entities for the entire workspace, see [replace token permissions for entire workspace](#operation/update-all-permissions).\n\nFor an overview, see the [introduction to token permissions](#tag/Token-permissions)."
							},
							"response": [
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The token permissions for specified entities were successfully updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"authorization/tokens\",\n \"object_type\": \"tokens\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    },\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    },\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								}
							]
						},
						{
							"name": "Replace all token permissions for workspace, revoking tokens for users that no longer have permissions.",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"Ut cillum minim eiusmod\",\n            \"permission_level\": \"<string>\"\n        },\n        {\n            \"user_name\": \"ul\",\n            \"permission_level\": \"<string>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/authorization/tokens",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"authorization",
										"tokens"
									]
								},
								"description": "Update all token permissions for all users, groups, and service principals for the entire workspace. The permissions that you specify in this request overwrite the existing permissions entirely. You must provide a complete set of all permissions for all objects in one request.\n\nAt the end of processing your request, all users and service principals that do not have either `CAN_USE` or `CAN_MANAGE` permission either explicitly or implicitly due to group assignment no longer have any tokens permissions. Affected users or service principals immediately have all their tokens deleted.\n\nNotes about the special two built-in groups:\n\n* By default, the all users group (group `users`) has `CAN_USE` access. To remove that default access, do not include it in the request. You can add explicit `CAN_USE` access for any other entities.\n* You are required to grant the administrators group (group `admins`) the `CAN_MANAGE` permission. It is unsupported to grant this permission to any other entities.\n**WARNING:** This request has powerful effects for workspace security configuration and on a workspace's users if they already use tokens. Use with caution. This request overwrites all existing token permissions with the data in the request body. By omitting reference to an entity that previously had permissions, access is stripped and existing tokens are permanently deleted.\n\nTo grant token permissions for one specific entity rather than the entire workspace, instead see [update tokens permissions for a specific object](#operation/set-permissions). That API can only add permissions, not revoke permissions.\n\nFor an overview, see the [introduction to token permissions](#tag/Token-permissions)."
							},
							"response": [
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The permissions for the workspace were successfully updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": \"<string>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"authorization/tokens\",\n \"object_type\": \"tokens\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    },\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    },\n    {\n     \"permission_level\": \"CAN_USE\",\n     \"inherited\": false\n    }\n   ]\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Get token permission levels",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/authorization/tokens/permissionLevels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"authorization",
										"tokens",
										"permissionLevels"
									]
								},
								"description": "Returns a JSON representation of the possible permissions levels for tokens. For details, see the [required token permission levels for various actions](#tag/Token-permissions). The results of this request do **not** change based on the state of the workspace or the permissions of the calling user. This request is published for consistency with other permissions APIs."
							},
							"response": [
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens",
												"permissionLevels"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens",
												"permissionLevels"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens",
												"permissionLevels"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "Token permission levels were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/authorization/tokens/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"authorization",
												"tokens",
												"permissionLevels"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"permission_levels\": [\n  {\n   \"permission_level\": \"CAN_MANAGE\",\n   \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n  },\n  {\n   \"permission_level\": \"CAN_MANAGE\",\n   \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "clusters/{cluster id}",
					"item": [
						{
							"name": "Get cluster permissions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"clusters",
										":cluster_id"
									],
									"variable": [
										{
											"key": "cluster_id",
											"value": "<string>",
											"description": "(Required) The ID of the cluster to get permission levels on."
										}
									]
								}
							},
							"response": [
								{
									"name": "Permissions for the cluster were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/clusters/0712-200003-rail519\",\n \"object_type\": \"cluster\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    },\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    },\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								}
							]
						},
						{
							"name": "Update cluster permissions for a specific entity",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ad proident dolore et dolor\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"id do proident sint et\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"clusters",
										":cluster_id"
									],
									"variable": [
										{
											"key": "cluster_id",
											"value": "<string>",
											"description": "(Required) The ID of the cluster to get permission levels on."
										}
									]
								},
								"description": "Grant cluster permissions for one or more users, groups, or service principals.\n\nThis request only grants (adds) permissions. To revoke, use the [replace all cluster permissions](#operation/update-all-cluster-permissions) operation."
							},
							"response": [
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The cluster permissions for specified items were successfully updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/clusters/0712-200003-rail519\",\n \"object_type\": \"cluster\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    },\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    },\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								}
							]
						},
						{
							"name": "Replace cluster permissions",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ad proident dolore et dolor\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"id do proident sint et\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"clusters",
										":cluster_id"
									],
									"variable": [
										{
											"key": "cluster_id",
											"value": "<string>",
											"description": "(Required) The ID of the cluster to get permission levels on."
										}
									]
								},
								"description": "Update all clusters permissions for a specific cluster, specifying all users, groups or service principal.\n\n**WARNING:** This request overwrites all existing direct (non-inherited) permissions on the cluster and replaces it with the new permissions specified in the request body."
							},
							"response": [
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The permissions for the cluster were successfully updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/clusters/0712-200003-rail519\",\n \"object_type\": \"cluster\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    },\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    },\n    {\n     \"permission_level\": \"CAN_RESTART\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/clusters/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								}
							]
						},
						{
							"name": "Get cluster permission levels",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/clusters/:cluster_id/permissionLevels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"clusters",
										":cluster_id",
										"permissionLevels"
									],
									"variable": [
										{
											"key": "cluster_id",
											"value": "<string>",
											"description": "(Required) The ID of the cluster to get permission levels on."
										}
									]
								},
								"description": "Returns a JSON representation of the possible permissions levels for clusters."
							},
							"response": [
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "Cluster permission levels were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/clusters/:cluster_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"clusters",
												":cluster_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "cluster_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"permission_levels\": [\n  {\n   \"permission_level\": \"CAN_MANAGE\",\n   \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n  },\n  {\n   \"permission_level\": \"CAN_MANAGE\",\n   \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "instance-pools/{instance pool id}",
					"item": [
						{
							"name": "Get Pool permissions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"instance-pools",
										":instance_pool_id"
									],
									"variable": [
										{
											"key": "instance_pool_id",
											"value": "<string>",
											"description": "(Required) The ID of a pool."
										}
									]
								},
								"description": "Get permissions for a specific pool. "
							},
							"response": [
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "Permissions for the pool were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/instance-pools/0627-190120-two15-pool-6wmqH7IJ\",\n \"object_type\": \"instance-pool\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    },\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    },\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								}
							]
						},
						{
							"name": "Update pool permissions for a specific entity",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ad proident dolore et dolor\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"id do proident sint et\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"instance-pools",
										":instance_pool_id"
									],
									"variable": [
										{
											"key": "instance_pool_id",
											"value": "<string>",
											"description": "(Required) The ID of a pool."
										}
									]
								},
								"description": "Grant pool permissions for one or more users, groups, or service principal.\n\nThis request only grants (adds) permissions. To revoke, use the [replace all pool permissions](#operation/update-all-instance-pool-permissions) operation."
							},
							"response": [
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The pool permissions were updated successfully",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/instance-pools/0627-190120-two15-pool-6wmqH7IJ\",\n \"object_type\": \"instance-pool\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    },\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    },\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    }\n   ]\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Replace all pool permissions",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ad proident dolore et dolor\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"id do proident sint et\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"instance-pools",
										":instance_pool_id"
									],
									"variable": [
										{
											"key": "instance_pool_id",
											"value": "<string>",
											"description": "(Required) The ID of a pool."
										}
									]
								},
								"description": "Update all pool permissions for all users, groups or service principal for a specific pool.\n\n**WARNING:** This request overwrites all existing permissions on the pool and replaces it with the new permissions specified in the request body."
							},
							"response": [
								{
									"name": "The permissions for the workspace were successfully updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/instance-pools/0627-190120-two15-pool-6wmqH7IJ\",\n \"object_type\": \"instance-pool\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    },\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    },\n    {\n     \"permission_level\": \"CAN_ATTACH_TO\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/instance-pools/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": \"CAN_MANAGE\",\n                \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								}
							]
						},
						{
							"name": "Get pool permission levels",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id/permissionLevels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"instance-pools",
										":instance_pool_id",
										"permissionLevels"
									],
									"variable": [
										{
											"key": "instance_pool_id",
											"value": "<string>",
											"description": "(Required) The ID of a pool"
										}
									]
								},
								"description": "Returns a JSON representation of the possible permissions levels for pools."
							},
							"response": [
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "Pool permission levels were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"permission_levels\": [\n  {\n   \"permission_level\": \"CAN_MANAGE\",\n   \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n  },\n  {\n   \"permission_level\": \"CAN_MANAGE\",\n   \"description\": \"Permission to manage this object. Applies to clusters, pools, jobs, notebooks, directories, and registered models.\"\n  }\n ]\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/instance-pools/:instance_pool_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"instance-pools",
												":instance_pool_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "instance_pool_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "jobs/{job id}",
					"item": [
						{
							"name": "Get job permissions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/jobs/:job_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"jobs",
										":job_id"
									],
									"variable": [
										{
											"key": "job_id",
											"value": "<string>",
											"description": "(Required) The ID of the job to get permission levels on."
										}
									]
								}
							},
							"response": [
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "Permissions for the job were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/jobs/123\",\n \"object_type\": \"job\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								}
							]
						},
						{
							"name": "Update job permissions for a specific entity",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ullamc\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"anim veniam\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/jobs/:job_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"jobs",
										":job_id"
									],
									"variable": [
										{
											"key": "job_id",
											"value": "<string>",
											"description": "(Required) The ID of the job to get permission levels on."
										}
									]
								},
								"description": "Grant jobs permissions for one or more users, groups, or service principals.\n\nThis request only grants (adds) permissions. To revoke, use the [replace all job permissions](#operation/update-all-job-permissions) operation."
							},
							"response": [
								{
									"name": "The job permissions for specified items were successfully updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/jobs/123\",\n \"object_type\": \"job\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								}
							]
						},
						{
							"name": "Replace specific job permissions",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ullamc\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"anim veniam\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/jobs/:job_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"jobs",
										":job_id"
									],
									"variable": [
										{
											"key": "job_id",
											"value": "<string>",
											"description": "(Required) The ID of the job to get permission levels on."
										}
									]
								},
								"description": "Update all jobs permissions for all users, groups, or service principal for a specific job.\n\n**WARNING:** This request overwrites all existing direct permissions on the job and replaces it with the new permissions specified in the request body."
							},
							"response": [
								{
									"name": "The permissions for the workspace were updated successfully",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/jobs/123\",\n \"object_type\": \"job\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/jobs/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								}
							]
						},
						{
							"name": "Get job permission levels",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/jobs/:job_id/permissionLevels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"jobs",
										":job_id",
										"permissionLevels"
									],
									"variable": [
										{
											"key": "job_id",
											"value": "<string>",
											"description": "(Required) The ID of the job to get permission levels on."
										}
									]
								},
								"description": "Returns a JSON representation of the possible permissions levels for jobs."
							},
							"response": [
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "Job permission levels were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/jobs/:job_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"jobs",
												":job_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "job_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"permission_levels\": [\n  {\n   \"permission_level\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"permission_level\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "notebooks/{notebook id}",
					"item": [
						{
							"name": "Get notebook permissions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"notebooks",
										":notebook_id"
									],
									"variable": [
										{
											"key": "notebook_id",
											"value": "<string>",
											"description": "(Required) The ID of the notebook to get permission levels on."
										}
									]
								}
							},
							"response": [
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "Permissions for the notebook were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/notebooks/108\",\n \"object_type\": \"notebook\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								}
							]
						},
						{
							"name": "Update notebook permissions for a specific entity",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ullamc\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"anim veniam\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"notebooks",
										":notebook_id"
									],
									"variable": [
										{
											"key": "notebook_id",
											"value": "<string>",
											"description": "(Required) The ID of the notebook to get permission levels on."
										}
									]
								},
								"description": "Grant a notebook new permissions for one or more users, groups, or service principals.\n\nThis request only grants (adds) permissions. To revoke, use the [replace all notebook permissions](#operation/update-all-notebook-permissions) operation."
							},
							"response": [
								{
									"name": "The notebook permissions for specified items were updated successfully",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/notebooks/108\",\n \"object_type\": \"notebook\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								}
							]
						},
						{
							"name": "Replace all notebook permissions",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ullamc\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"anim veniam\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"notebooks",
										":notebook_id"
									],
									"variable": [
										{
											"key": "notebook_id",
											"value": "<string>",
											"description": "(Required) The ID of the notebook to get permission levels on."
										}
									]
								},
								"description": "Update all notebooks permissions for all users, groups or service principal for a specific notebook.\n\n**WARNING:** This request overwrites all existing direct permissions on the notebook and replaces it with the new permissions specified in the request body."
							},
							"response": [
								{
									"name": "The permissions for the notebook were successfully updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/notebooks/108\",\n \"object_type\": \"notebook\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_RUN\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								}
							]
						},
						{
							"name": "Get notebook permission levels",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id/permissionLevels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"notebooks",
										":notebook_id",
										"permissionLevels"
									],
									"variable": [
										{
											"key": "notebook_id",
											"value": "<string>",
											"description": "(Required) The ID of the notebook to get permission levels on."
										}
									]
								},
								"description": "Returns a JSON representation of the possible permissions levels for notebooks."
							},
							"response": [
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "Notebook permission levels were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"permission_levels\": [\n  {\n   \"permission_level\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"permission_level\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/notebooks/:notebook_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"notebooks",
												":notebook_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "notebook_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "directories/{directory id}",
					"item": [
						{
							"name": "Get directory permissions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/directories/:directory_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"directories",
										":directory_id"
									],
									"variable": [
										{
											"key": "directory_id",
											"value": "<string>",
											"description": "(Required) The ID of the directory to get permission levels on."
										}
									]
								},
								"description": "Get directory permissions for a specific directory."
							},
							"response": [
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "Permissions for the directory were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/directories/112\",\n \"object_type\": \"directory\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								}
							]
						},
						{
							"name": "Update directories permissions for a specific entity",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ullamc\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"anim veniam\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/directories/:directory_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"directories",
										":directory_id"
									],
									"variable": [
										{
											"key": "directory_id",
											"value": "<string>",
											"description": "(Required) The ID of the directory to get permission levels on."
										}
									]
								},
								"description": "Grant a directory new permissions for one or more users, groups, or service principals.\n\nThis request only grants (adds) permissions. To revoke, use the [replace all directory permissions](#operation/update-all-directory-permissions) operation."
							},
							"response": [
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The directory permissions for specified items were successfully updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/directories/112\",\n \"object_type\": \"directory\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								}
							]
						},
						{
							"name": "Replace all directory permissions",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ullamc\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"anim veniam\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/directories/:directory_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"directories",
										":directory_id"
									],
									"variable": [
										{
											"key": "directory_id",
											"value": "<string>",
											"description": "(Required) The ID of the directory to get permission levels on."
										}
									]
								},
								"description": "Update all directory permissions for all users, groups, or service principal for a specific directory.\n\n**WARNING:** This request overwrites all existing direct permissions on the directory and replaces it with the new permissions specified in the request body."
							},
							"response": [
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The permissions for the directory were successfully updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/directories/112\",\n \"object_type\": \"directory\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    },\n    {\n     \"permission_level\": \"CAN_MANAGE\",\n     \"inherited\": true,\n     \"inherited_from_object\": \"/directories/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								}
							]
						},
						{
							"name": "Get directory permission levels",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/directories/:directory_id/permissionLevels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"directories",
										":directory_id",
										"permissionLevels"
									],
									"variable": [
										{
											"key": "directory_id",
											"value": "<string>",
											"description": "(Required) The ID of the directory to get permission levels on."
										}
									]
								},
								"description": "Returns a JSON representation of the possible permissions levels for directories."
							},
							"response": [
								{
									"name": "Directory permission levels were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"permission_levels\": [\n  {\n   \"permission_level\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"permission_level\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/directories/:directory_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"directories",
												":directory_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "directory_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "registered-models/{registered model id}",
					"item": [
						{
							"name": "Get MLflow registered model permissions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"registered-models",
										":registered_model_id"
									],
									"variable": [
										{
											"key": "registered_model_id",
											"value": "<string>",
											"description": "(Required) The ID of the MLflow registered model to get permission levels on."
										}
									]
								},
								"description": "Get permissions for a specific MLflow registered model."
							},
							"response": [
								{
									"name": "Permissions for the registered model were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/registered-models/1234-5678-9012-3456\",\n \"object_type\": \"registered-model\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    },\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    },\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								}
							]
						},
						{
							"name": "Update MLflow registered model permissions for a specific entity",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ullamc\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"anim veniam\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"registered-models",
										":registered_model_id"
									],
									"variable": [
										{
											"key": "registered_model_id",
											"value": "<string>",
											"description": "(Required) The ID of the MLflow registered model to get permission levels on."
										}
									]
								},
								"description": "Grant MLflow registered model permissions for one or more users, groups, or service principals."
							},
							"response": [
								{
									"name": "The registered model permissions for specified items were updated successfully",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/registered-models/1234-5678-9012-3456\",\n \"object_type\": \"registered-model\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    },\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    },\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								}
							]
						},
						{
							"name": "Replace all MLflow registered model permissions",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"ullamc\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"anim veniam\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"registered-models",
										":registered_model_id"
									],
									"variable": [
										{
											"key": "registered_model_id",
											"value": "<string>",
											"description": "(Required) The ID of the MLflow registered model to get permission levels on."
										}
									]
								},
								"description": "Update all MLflow registered model permissions for all users, groups or service principal for a specific registered model.\n\n**WARNING:** This request overwrites all existing direct permissions on the registered model and replaces it with the new permissions specified in the request body."
							},
							"response": [
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "The permissions for the registered model were successfully updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        },\n        {\n            \"user_name\": \"jsmith@example.com\",\n            \"permission_level\": {\n                \"permission_level\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"description\": {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"object_id\": \"/registered-models/1234-5678-9012-3456\",\n \"object_type\": \"registered-model\",\n \"access_control_list\": [\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    },\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    }\n   ]\n  },\n  {\n   \"user_name\": \"jsmith@example.com\",\n   \"all_permissions\": [\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    },\n    {\n     \"permission_level\": \"CAN_EDIT\",\n     \"inherited\": false,\n     \"inherited_from_object\": \"/registered-models/\"\n    }\n   ]\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Get MLflow registered model permission levels",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id/permissionLevels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions",
										"registered-models",
										":registered_model_id",
										"permissionLevels"
									],
									"variable": [
										{
											"key": "registered_model_id",
											"value": "<string>",
											"description": "(Required) The ID of the registered model to get permission levels on."
										}
									]
								},
								"description": "Returns a JSON representation of the possible permissions levels for MLflow registered models."
							},
							"response": [
								{
									"name": "The request is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"PERMISSION_DENIED\",\n \"message\": \"Please contact the owner or an administrator for access.\"\n}"
								},
								{
									"name": "The request is malformed.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"BAD_REQUEST\",\n \"message\": \"Bad object ID: <error-message>\"\n}"
								},
								{
									"name": "The requested resource does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error_code\": \"FEATURE_DISABLED\",\n \"message\": \"<feature-name> is not enabled for this feature tier\"\n}"
								},
								{
									"name": "Registered model permission levels were successfully returned.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/permissions/registered-models/:registered_model_id/permissionLevels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"permissions",
												"registered-models",
												":registered_model_id",
												"permissionLevels"
											],
											"variable": [
												{
													"key": "registered_model_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"permission_levels\": [\n  {\n   \"permission_level\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"permission_level\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"description\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{pat}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "07529f9a-967e-42a5-bc9e-c99485919842",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f5391a1e-0d7b-419d-87ab-cdd8c8099325",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "9e0edfb7-da15-4aaa-8228-f7cac2d7a130",
			"key": "baseUrl",
			"value": "https://<databricks-instance>/api/2.0"
		}
	],
	"protocolProfileBehavior": {}
}