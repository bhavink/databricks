{
	"info": {
		"_postman_id": "81b8529e-a1db-45be-b8e1-a005485975d7",
		"name": "Token Managment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01-list all tokens",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f901896-b88e-428e-b663-31c85eb31ae2",
						"exec": [
							"pm.test(pm.info.requestName, () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{db_host}}/api/2.0/preview/token-management/tokens",
					"host": [
						"{{db_host}}"
					],
					"path": [
						"api",
						"2.0",
						"preview",
						"token-management",
						"tokens"
					]
				}
			},
			"response": []
		},
		{
			"name": "02-list user tokens",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f901896-b88e-428e-b663-31c85eb31ae2",
						"exec": [
							"pm.test(pm.info.requestName, () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{db_host}}/api/2.0/preview/token-management/tokens?created_by=bhavin.kukadia@databricks.com",
					"host": [
						"{{db_host}}"
					],
					"path": [
						"api",
						"2.0",
						"preview",
						"token-management",
						"tokens"
					],
					"query": [
						{
							"key": "created_by",
							"value": "bhavin.kukadia@databricks.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "03-get token details by hashid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f901896-b88e-428e-b663-31c85eb31ae2",
						"exec": [
							"pm.test(pm.info.requestName, () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{db_host}}/api/2.0/preview/token-management/tokens/f447013eb39c545f5575bca70d9a487a26e9ae69ec3cd9b87e51c66c3b77d408",
					"host": [
						"{{db_host}}"
					],
					"path": [
						"api",
						"2.0",
						"preview",
						"token-management",
						"tokens",
						"f447013eb39c545f5575bca70d9a487a26e9ae69ec3cd9b87e51c66c3b77d408"
					]
				}
			},
			"response": []
		},
		{
			"name": "04-set token max lifetime for the workspace",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f901896-b88e-428e-b663-31c85eb31ae2",
						"exec": [
							"pm.test(pm.info.requestName, () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \"maxTokenLifetimeDays\": \"90\" }"
				},
				"url": {
					"raw": "{{db_host}}/api/2.0/preview/workspace-conf",
					"host": [
						"{{db_host}}"
					],
					"path": [
						"api",
						"2.0",
						"preview",
						"workspace-conf"
					]
				},
				"description": "maximum token lifetime in days and\nIf maxTokenLifetime is set to a non-positive value, tokens with indefinite lifetime can be created."
			},
			"response": []
		},
		{
			"name": "05-get token max lifetime for the workspace",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f901896-b88e-428e-b663-31c85eb31ae2",
						"exec": [
							"pm.test(pm.info.requestName, () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{db_host}}/api/2.0/preview/workspace-conf?keys=maxTokenLifetimeDays",
					"host": [
						"{{db_host}}"
					],
					"path": [
						"api",
						"2.0",
						"preview",
						"workspace-conf"
					],
					"query": [
						{
							"key": "keys",
							"value": "maxTokenLifetimeDays"
						}
					]
				},
				"description": "maximum token lifetime in days and\nIf maxTokenLifetime is set to a non-positive value, tokens with indefinite lifetime can be created."
			},
			"response": []
		},
		{
			"name": "06-get permission levels for tokens",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f901896-b88e-428e-b663-31c85eb31ae2",
						"exec": [
							"pm.test(pm.info.requestName, () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{db_host}}/api/2.0/permissions/tokens/all/permissionLevels",
					"host": [
						"{{db_host}}"
					],
					"path": [
						"api",
						"2.0",
						"permissions",
						"tokens",
						"all",
						"permissionLevels"
					]
				}
			},
			"response": []
		},
		{
			"name": "07-get user permission on tokens",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f901896-b88e-428e-b663-31c85eb31ae2",
						"exec": [
							"pm.test(pm.info.requestName, () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{db_host}}/api/2.0/permissions/tokens/all",
					"host": [
						"{{db_host}}"
					],
					"path": [
						"api",
						"2.0",
						"permissions",
						"tokens",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "08-grant permission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f901896-b88e-428e-b663-31c85eb31ae2",
						"exec": [
							"pm.test(pm.info.requestName, () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"bhavin.kukadia@databricks.com\",\n            \"permission_level\": \"CAN_USE\"\n        }\n    ]\n}\n"
				},
				"url": {
					"raw": "{{db_host}}/api/2.0/permissions/tokens/all",
					"host": [
						"{{db_host}}"
					],
					"path": [
						"api",
						"2.0",
						"permissions",
						"tokens",
						"all"
					]
				},
				"description": "\"user_name\": \"user name\" || \"group_name\": \"group name\" || \"service_principal_name\": \"service principal name\" <br>\n\"permission_level\": \"CAN_MANAGE or CAN_USE\""
			},
			"response": []
		},
		{
			"name": "09-revoke permission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f901896-b88e-428e-b663-31c85eb31ae2",
						"exec": [
							"pm.test(pm.info.requestName, () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"access_control_list\": [\n        {\n            \"user_name\": \"bhavin.kukadia@databricks.com\",\n            \"permission_level\": \"CAN_USE\"\n        },\n        {\n            \"group_name\": \"dev-grp\",\n            \"permission_level\": \"CAN_USE\"\n        },\n        {\n            \"group_name\": \"admins\",\n            \"permission_level\": \"CAN_MANAGE\"\n        }\n    ]\n}\n"
				},
				"url": {
					"raw": "{{db_host}}/api/2.0/permissions/tokens/all",
					"host": [
						"{{db_host}}"
					],
					"path": [
						"api",
						"2.0",
						"permissions",
						"tokens",
						"all"
					]
				},
				"description": "Since PUT completely <b>overwrites</b> the existing permissions, every PUT request should mandatorily specify { “group_name”: “admins”, “permission_level”: “CAN_MANAGE” } in the access control list in the payload"
			},
			"response": []
		},
		{
			"name": "10-delete token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f901896-b88e-428e-b663-31c85eb31ae2",
						"exec": [
							"pm.test(pm.info.requestName, () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{db_host}}/api/2.0/preview/token-management/tokens/f447013eb39c545f5575bca70d9a487a26e9ae69ec3cd9b87e51c66c3b77d408",
					"host": [
						"{{db_host}}"
					],
					"path": [
						"api",
						"2.0",
						"preview",
						"token-management",
						"tokens",
						"f447013eb39c545f5575bca70d9a487a26e9ae69ec3cd9b87e51c66c3b77d408"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}